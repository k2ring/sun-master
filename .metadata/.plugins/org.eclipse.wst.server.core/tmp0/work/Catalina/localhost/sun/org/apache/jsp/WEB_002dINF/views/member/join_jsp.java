/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-10-24 01:55:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1695776512350L));
    _jspx_dependants.put("jar:file:/C:/Users/hotjy/Documents/sun-master/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/sun/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("<!DOCTYPE html >\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("//id중복체크\n");
      out.write("function fn_overlapped(){\n");
      out.write("	//member_id 값을 가져와 overlapped를 실행함.\n");
      out.write("    var _id=$(\"#member_id\").val();\n");
      out.write("    if(_id==''){return;}\n");
      out.write("    \n");
      out.write("    $.ajax({\n");
      out.write("       type:\"post\",\n");
      out.write("       async:false,  \n");
      out.write("       url:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/member/overlapped.do\",\n");
      out.write("       dataType:\"text\",\n");
      out.write("       data: {id:_id},\n");
      out.write("       success:function (data,textStatus){\n");
      out.write("    	  //가능한 id일 경우 input값은 _id로 유지되며 외의경우 아무런이벤트 없음 \n");
      out.write("    	  //각 상황에 따른 피드백 및 스타일을 add or remove\n");
      out.write("          if(data=='false'){\n");
      out.write("       	    $('#member_id').addClass(\"is-valid\");\n");
      out.write("       		$('#member_id').removeClass(\"is-invalid\");\n");
      out.write("       	 	$('.member_id-feedback.valid-feedback').removeClass(\"d-none\");\n");
      out.write("       	    $('#member_id').val(_id);\n");
      out.write("          }else{\n");
      out.write("        	  $('#member_id').removeClass(\"is-valid\");\n");
      out.write("        	  $('#member_id').addClass(\"is-invalid\");\n");
      out.write("        	  $('.member_id-feedback.invalid-feedback').removeClass(\"d-none\");\n");
      out.write("          }\n");
      out.write("       },\n");
      out.write("       error:function(data,textStatus){\n");
      out.write("          alert(\"에러가 발생했습니다.\");\n");
      out.write("       },\n");
      out.write("       complete:function(data,textStatus){}\n");
      out.write("    });\n");
      out.write(" }	\n");
      out.write("//id중복체크\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	<form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/member/join.do\" method=\"post\"\n");
      out.write("		id=\"joinForm\">\n");
      out.write("\n");
      out.write("		<!-- id -->\n");
      out.write("		<input class=\"form-control form-control-lg rounded-0 mb-0\"\n");
      out.write("			name=\"member_id\" id=\"member_id\" type=\"text\" placeholder=\"아이디\"\n");
      out.write("			onblur=\"fn_overlapped()\" required>\n");
      out.write("		<div class=\"member_id-feedback valid-feedback text-start fs-07 d-none\">\n");
      out.write("			사용가능한 아이디 입니다.</div>\n");
      out.write("		<div\n");
      out.write("			class=\"member_id-feedback invalid-feedback text-start fs-07 d-none\">\n");
      out.write("			사용중인 아이디 입니다.</div>\n");
      out.write("		<div class=\"mb-3\"></div>\n");
      out.write("		<!-- id -->\n");
      out.write("\n");
      out.write("\n");
      out.write("		<!-- password -->\n");
      out.write("		<input\n");
      out.write("			class=\"form-control form-control-lg rounded-0 mb-3 member_pwWrite\"\n");
      out.write("			name=\"member_pw\" type=\"text\" placeholder=\"비밀번호\" required\n");
      out.write("			onblur=\"member_pwChecking()\"> <input\n");
      out.write("			class=\"form-control form-control-lg rounded-0 mb-0 member_pwCheck\"\n");
      out.write("			type=\"text\" placeholder=\"비밀번호 확인\" required\n");
      out.write("			onblur=\"member_pwChecking()\">\n");
      out.write("\n");
      out.write("		<div class=\"member_pw-feedback valid-feedback text-start fs-07 d-none\">\n");
      out.write("			비밀번호가 일치합니다.</div>\n");
      out.write("\n");
      out.write("		<div\n");
      out.write("			class=\"member_pw-feedback invalid-feedback text-start fs-07 d-none\">\n");
      out.write("			비밀번호가 일치하지않습니다.</div>\n");
      out.write("		<!-- password -->\n");
      out.write("\n");
      out.write("\n");
      out.write("		<div class=\"mb-3\"></div>\n");
      out.write("\n");
      out.write("\n");
      out.write("		<!-- 이름 -->\n");
      out.write("		<input class=\"form-control form-control-lg rounded-0 mb-3 nameAndH1\"\n");
      out.write("			name=\"member_name\" type=\"text\" placeholder=\"이름\" required\n");
      out.write("			oninput=\"etcInptut()\">\n");
      out.write("\n");
      out.write("		<!-- 휴대폰번호 -->\n");
      out.write("		<input class=\"form-control form-control-lg rounded-0 mb-3 nameAndH1\" name=\"hp1\"\n");
      out.write("			type=\"text\" placeholder=\"휴대폰번호\" required oninput=\"etcInptut()\">\n");
      out.write("\n");
      out.write("		<div\n");
      out.write("			class=\"allRequiredInputCheck invalid-feedback text-start fs-07 mb-3 d-none\">\n");
      out.write("			모든 정보를 입력해주세요.</div>\n");
      out.write("\n");
      out.write("		<button type=\"button\" onClick=\"joinSun()\"\n");
      out.write("			class=\"btn btn-main rounded-0 w-100 d-block fw-bold p-2 lh-lg mb-3\">회원가입</button>\n");
      out.write("		<a\n");
      out.write("			class=\"btn border-main rounded-0 w-100 d-block fw-bold p-2 lh-lg mb-3\"\n");
      out.write("			href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/member/login.do\">로그인</a>\n");
      out.write("	</form>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	<script>\n");
      out.write("	\n");
      out.write("	//비밀번호 확인 값체크\n");
      out.write("	//password input에서 onblur시 member_pwChecking가 실행됨.\n");
      out.write("    function member_pwChecking(){\n");
      out.write("   	 	let member_pwWrite = document.querySelector('.member_pwWrite');\n");
      out.write("        let member_pwCheck = document.querySelector('.member_pwCheck');\n");
      out.write("        let member_pw_feedback = document.querySelector('.member_pw-feedback.invalid-feedback');\n");
      out.write("        let member_pw_feedback_valid = document.querySelector('.member_pw-feedback.valid-feedback');\n");
      out.write("        \n");
      out.write("        //member_pwWrite와 member_pwCheck가 입력되엇을때만 안내문구를 출력할 것임.\n");
      out.write("		if(member_pwWrite.value==\"\" || member_pwCheck.value==\"\"){\n");
      out.write("			console.log(\"아무것도입력되지않음\");\n");
      out.write("		}else{\n");
      out.write("			//같지않을때\n");
      out.write("			if(member_pwWrite.value != member_pwCheck.value){\n");
      out.write("            	 member_pwWrite.classList.remove(\"is-valid\");\n");
      out.write("            	 member_pwCheck.classList.remove(\"is-valid\");\n");
      out.write("            	 \n");
      out.write("            	 member_pwWrite.classList.add(\"is-invalid\");\n");
      out.write("            	 member_pwCheck.classList.add(\"is-invalid\");\n");
      out.write("            	 member_pw_feedback.classList.remove(\"d-none\");\n");
      out.write("            	 member_pw_feedback.classList.add(\"d-block\");\n");
      out.write("            	 \n");
      out.write("            	 member_pw_feedback_valid.classList.remove(\"d-block\");\n");
      out.write("            	 member_pw_feedback_valid.classList.add(\"d-none\");\n");
      out.write("             }else{\n");
      out.write("            	//같을때\n");
      out.write("            	 member_pwWrite.classList.remove(\"is-invalid\");\n");
      out.write("            	 member_pwCheck.classList.remove(\"is-invalid\");\n");
      out.write("            	 member_pw_feedback.classList.add(\"d-none\");\n");
      out.write("            	 member_pw_feedback.classList.remove(\"d-block\");\n");
      out.write("            	 \n");
      out.write("            	 member_pwWrite.classList.add(\"is-valid\");\n");
      out.write("            	 member_pwCheck.classList.add(\"is-valid\");\n");
      out.write("            	 \n");
      out.write("            	 member_pw_feedback_valid.classList.add(\"d-block\");\n");
      out.write("            	 member_pw_feedback_valid.classList.remove(\"d-none\");\n");
      out.write("             }\n");
      out.write("		}\n");
      out.write("    }\n");
      out.write("  	//비밀번호 확인 값체크\n");
      out.write("\n");
      out.write("  \n");
      out.write("        const form = document.getElementById(\"joinForm\");\n");
      out.write("        const inputs = form.querySelectorAll(\"input[required]\");\n");
      out.write("        const nameAndH1 = form.querySelectorAll(\".nameAndH1\");\n");
      out.write("        var allRequiredInputCheck = document.querySelector('.allRequiredInputCheck');\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        //이름, 휴대폰 input 에서 this input이 공란일때 style로 경고를 표시함.\n");
      out.write("        function etcInptut(){\n");
      out.write("        	if(this.value != \"\"){\n");
      out.write("        		nameAndH1.forEach(input => {input.classList.remove(\"is-invalid\");});\n");
      out.write("        		allRequiredInputCheck.classList.add('d-none');\n");
      out.write("        	}\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        //회원가입\n");
      out.write("        function joinSun(){\n");
      out.write("            let isValid = true;\n");
      out.write("            //input들의 값을 확인하여 값이 없을경우 style을 변경한다.\n");
      out.write("            inputs.forEach(input => {\n");
      out.write("                if (!input.value) {\n");
      out.write("                  isValid = false;\n");
      out.write("                  input.classList.add(\"is-invalid\");\n");
      out.write("                } else {\n");
      out.write("                  input.classList.remove(\"is-invalid\");\n");
      out.write("                  allRequiredInputCheck.classList.add('d-none');\n");
      out.write("                }\n");
      out.write("              });\n");
      out.write("            \n");
      out.write("         // 모든 입력이 유효하면 폼을 제출\n");
      out.write("            if (isValid) {form.submit();} \n");
      out.write("            else {\n");
      out.write("            	allRequiredInputCheck.classList.remove('d-none');}\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/member/join.jsp(4,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /WEB-INF/views/member/join.jsp(4,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/member/join.jsp(4,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
