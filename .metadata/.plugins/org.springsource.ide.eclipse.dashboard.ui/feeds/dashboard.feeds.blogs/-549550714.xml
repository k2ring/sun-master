<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 24 Oct 2023 16:59:36 GMT</lastBuildDate><item><title><![CDATA[A Use Case for Transactions: Adapting to Transactional Outbox Pattern Semantics in Spring Cloud Stream Kafka Binder]]></title><link>https://spring.io/blog/2023/10/24/a-use-case-for-transactions-adapting-to-transactional-outbox-pattern</link><guid isPermaLink="true">https://spring.io/blog/2023/10/24/a-use-case-for-transactions-adapting-to-transactional-outbox-pattern</guid><dc:creator><![CDATA[Soby Chacko]]></dc:creator><pubDate>Tue, 24 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Other parts in this blog series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Part 1: &lt;a href=&quot;https://spring.io/blog/2023/09/27/introduction-to-transactions-in-spring-cloud-stream-kafka-applications&quot;&gt;Introduction to Transactions in Spring Cloud Stream Kafka Applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 2: &lt;a href=&quot;https://spring.io/blog/2023/09/28/producer-initiated-transactions-in-spring-cloud-stream-kafka-applications&quot;&gt;Producer Initiated Transactions in Spring Cloud Stream Kafka Applications
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 3: &lt;a href=&quot;https://spring.io/blog/2023/10/04/synchronizing-with-external-transaction-managers-in-spring-cloud-stream&quot;&gt;Synchronizing with External Transaction Managers in Spring Cloud Stream Kafka Applications
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 4: &lt;a href=&quot;https://spring.io/blog/2023/10/11/transactional-rollback-strategies-with-spring-cloud-stream-and-apache-kafka&quot;&gt;Transactional Rollback Strategies with Spring Cloud Stream and Apache Kafka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 5: &lt;a href=&quot;https://spring.io/blog/2023/10/16/apache-kafkas-exactly-once-semantics-in-spring-cloud-stream-kafka&quot;&gt;Apache Kafka¡¯s Exactly-Once Semantics in Spring Cloud Stream Kafka Applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this last part of this blog series, we dive into a relatively new design pattern first proposed by &lt;a href=&quot;https://microservices.io/book&quot;&gt;Chris Richardson&lt;/a&gt; but seeing it from the perspective of Spring Cloud Stream. We will see what the outbox pattern is, how it works, and how we can adapt to the semantics of this pattern when using Spring Cloud Stream and Apache Kafka. See the descriptions &lt;a href=&quot;https://microservices.io/patterns/data/transactional-outbox.html&quot;&gt;here&lt;/a&gt; for an introduction to how the Outbox pattern works.&lt;/p&gt;
&lt;h3 id=&quot;quick-summary-of-the-outbox-pattern&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#quick-summary-of-the-outbox-pattern&quot; aria-label=&quot;quick summary of the outbox pattern permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Quick Summary of the Outbox Pattern&lt;/h3&gt;
&lt;p&gt;In a nutshell, the outbox pattern ensures the delivery of a database or external system and publishing to a messaging system within a single atomic unit by strictly avoiding &lt;a href=&quot;https://martinfowler.com/articles/patterns-of-distributed-systems/two-phase-commit.html&quot;&gt;two-phase commits (2PC)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the outbox pattern, the developer needs to follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The processor method receives the message.&lt;/li&gt;
&lt;li&gt;In its logic, it first engages with the database transactionally and then creates a new record in a particular table called the outbox within the same transaction.&lt;/li&gt;
&lt;li&gt;An external process queries this outbox table and publishes the message to Kafka.&lt;/li&gt;
&lt;li&gt;The record is removed from the outbox table once the Kafka publishing succeeds.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Here is a diagrammatic view of this flow:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/spring-cloud/spring-cloud-stream/raw/gh-pages/images/outbox-pattern-txn-blog-part-6.png&quot; alt=&quot;outbox-pattern-txn-blog-part-6&quot;&gt;&lt;/p&gt;
&lt;p&gt;The result is that the &lt;strong&gt;end-to-end&lt;/strong&gt; flow of events is semantically done in a transactional manner. We wrote, ¡°semantically,¡± because the process that updates the messaging system, in this case, is outside the database transaction yet achieves the data integrity guarantee that a transactional system guarantees. If the database write was successful, the downstream process sees that and publishes the record from the outbox table to the Kafka topic. If the database transaction doesn¡¯t succeed, nothing is written to Kafka. It is important to note that we still need to use synchronization during the Kafka publishing part and during the removal of the outbox record.&lt;/p&gt;
&lt;h3 id=&quot;adapting-to-outbox-pattern-in-spring-cloud-stream&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#adapting-to-outbox-pattern-in-spring-cloud-stream&quot; aria-label=&quot;adapting to outbox pattern in spring cloud stream permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adapting to Outbox pattern in Spring Cloud Stream&lt;/h3&gt;
&lt;p&gt;The outbox pattern works in many different use cases that involve message brokers. If your use case specifically requires the usage of this pattern, you can implement this pattern as prescribed. However, in this blog, we show you some alternative strategies when it comes to these use cases if you are a Spring and Apache Kafka user.&lt;/p&gt;
&lt;p&gt;Although, conceptually, the outbox design pattern is a good abstraction for messaging systems in general when an application wants to avoid 2PC, as we discussed in &lt;a href=&quot;https://spring.io/blog/2023/10/04/synchronizing-with-external-transaction-managers-in-spring-cloud-stream&quot;&gt;part 3&lt;/a&gt; of this series, with Apache Kafka and Spring Cloud Stream, we don¡¯t need to implement this pattern as it is specified above. First, there are complexities in the implementation, such as the need for the application to maintain an extra database table for outbox, extra code to consume it and then publish to Kafka, more code to delete it explicitly from it after the message gets published, and so on.&lt;/p&gt;
&lt;p&gt;When writing Spring Cloud Stream Kafka applications, we can avoid this complexity by relying on the transactional support available in Spring Cloud Stream through Spring for Apache Kafka.&lt;/p&gt;
&lt;p&gt;Imagine a service written for the same order-service as above but rewritten as a transactional Spring Cloud Stream application. As with the original outbox pattern¡¯s premise of avoiding 2PC, we don¡¯t have to use a 2-phase commit with distributed transaction managers in this model as well. At the same time, we can also avoid needing the extra outbox table and external code for querying it and publishing it to the Kafka topic. All this could be done within the scope of a single atomic unit when using transactional support in the Spring Cloud Stream Kafka ecosystem. As we saw in our detailed analysis in &lt;a href=&quot;https://spring.io/blog/2023/10/04/synchronizing-with-external-transaction-managers-in-spring-cloud-stream&quot;&gt;part 3&lt;/a&gt;, the Kafka transaction synchronizes with the database transaction.&lt;/p&gt;
&lt;h3 id=&quot;outbox-pattern-semantics-in-producer-initiated-applications&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#outbox-pattern-semantics-in-producer-initiated-applications&quot; aria-label=&quot;outbox pattern semantics in producer initiated applications permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Outbox pattern semantics in producer-initiated applications&lt;/h3&gt;
&lt;p&gt;In &lt;a href=&quot;https://spring.io/blog/2023/09/28/producer-initiated-transactions-in-spring-cloud-stream-kafka-applications&quot;&gt;part 2&lt;/a&gt; of the series, we saw producer-initiated transactions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Autowired
Sender sender;

@PostMapping(&quot;/send-data&quot;)
public void sendData() throws InterruptedException {
   sender.send(streamBridge, repository);
}

@Component
static class Sender {

   @Transactional
   public void send(StreamBridge streamBridge, OrderRepository repository){
       Order order = new Order();
       order.setId(&quot;order-id&quot;);

       Order savedOrder = repository.save(order);

       OrderEvent event = new OrderEvent();
       event.setId(savedOrder.getId());
       event.setType(&quot;OrderType&quot;);
       streamBridge.send(&quot;process-out-0&quot;, event);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main trigger for the workflow is a REST endpoint, which calls a method annotated with &lt;code&gt;@Transactional&lt;/code&gt;. The transaction interceptor starts the JPA transaction, and the database operation occurs, but no commit happens as part of it since the method is in the middle of a transaction. After this, we publish to Kafka through the &lt;code&gt;StreamBridge&lt;/code&gt; send method. The &lt;code&gt;KafkaTemplate&lt;/code&gt; used by &lt;code&gt;StreamBridge&lt;/code&gt; uses a transactional producer factory (assuming we set the &lt;code&gt;transaction-id-prefix&lt;/code&gt;). Rather than starting a new Kafka transaction, the transactional resource synchronizes with the JPA transaction. When the method exits, the JPA commits first, followed by the synchronized Kafka one. As you can see, it accomplishes the same result proposed by the outbox pattern by using different strategies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is a visual representation of this flow:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/spring-cloud/spring-cloud-stream/raw/gh-pages/images/producer-init-txn-blog-part-6.png&quot; alt=&quot;producer-init-txn-blog-part-6&quot;&gt;&lt;/p&gt;
&lt;p&gt;As can be seen from this diagram, the end-to-end flow runs as part of a single transactional atomic unit and, thus, does not require any extra outbox table and external process to query it and then only publish to Kafka and so on.&lt;/p&gt;
&lt;h3 id=&quot;outbox-pattern-semantics-in-consume-process-produce-applications&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#outbox-pattern-semantics-in-consume-process-produce-applications&quot; aria-label=&quot;outbox pattern semantics in consume process produce applications permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Outbox pattern semantics in consume-process-produce applications&lt;/h3&gt;
&lt;p&gt;When it comes to &lt;strong&gt;consumer-process-produce&lt;/strong&gt; type applications, the situation is more involved, because the message listener container in Spring for Apache Kafka starts a Kafka transaction after consuming the record. However, in the context of the outbox pattern, we again have a semantically simplified end-to-end process.&lt;/p&gt;
&lt;p&gt;Let¡¯s revisit the code for a &lt;strong&gt;consume-process-produce&lt;/strong&gt; pattern we saw in &lt;a href=&quot;https://spring.io/blog/2023/10/04/synchronizing-with-external-transaction-managers-in-spring-cloud-stream&quot;&gt;blog 3&lt;/a&gt; in the series:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Bean
public Consumer&amp;#x3C;OrderEvent&gt; process(TxCode txCode) {
   return txCode::run;
}

@Component
class TxCode {

   @Transactional
   void run(OrderEvent orderEvent) {
       Order order = new Order();
       order.setId(orderEvent.getId());

       Order savedOrder = repository.save(order);

       OrderEvent event = new OrderEvent();
       event.setId(savedOver.getId());
       event.setType(&quot;OrderType&quot;);
       streamBridge.send(&quot;process-out-0&quot;, event);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code achieves the same functional semantics promised by the outbox pattern but without needing an extra database table for the outbox, its maintenance, the additional process that publishes to the Kafka topic, and other database related operations.&lt;/p&gt;
&lt;p&gt;The message listener container starts the Kafka transaction, and then we use &lt;code&gt;@Transactional&lt;/code&gt; to wrap our internal run method with a JPA transaction. If the database operation succeeds, we publish to the Kafka topic, and the Kafka publish operation uses the same transactional resources created at the beginning of this process by the message listener container. Once the method exits, JPA commits, and, once the control reaches back to the message listener container, it commits the Kafka transaction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is what is happening pictorially:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/spring-cloud/spring-cloud-stream/raw/gh-pages/images/cons-process-prod-txn-blog-part-6.png&quot; alt=&quot;cons-process-prod-txn-blog-part-6&quot;&gt;&lt;/p&gt;
&lt;p&gt;This way, we can keep the implementation very thin without needing the extra database setup and an external process to query the table and publish it to Kafka with synchronization, deleting the outbox record, and other complexities.&lt;/p&gt;
&lt;p&gt;It is worth repeating here that, in both the &lt;strong&gt;consumer-process-produce&lt;/strong&gt; pattern and the &lt;strong&gt;producer-initiated&lt;/strong&gt; transaction scenarios, if you want to follow the original rules of the outbox pattern implementation strictly, you can do that without going through the above shortcuts. Spring Cloud Stream and Spring for Apache Kafka let you do that. Just follow the pattern as prescribed. However, from the vantage point of the Spring Cloud Stream Kafka binder, there is little benefit in doing so beyond adhering to the original pattern.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Building on the transactional foundations we learned throughout this series, achieving the same guarantees of the outbox pattern semantics is straightforward when using Spring Cloud Stream and Apache Kafka. While accomplishing those semantics, we also avoided the complexities of the outbox pattern by maintaining lightweight strategies. None of these approaches we saw above from Spring Cloud Stream use two-phase commit (2PC) strategies, precisely what the outbox pattern also tries to avoid. In addition, these solutions also avoid the extra database table for outbox, the extra code to process it and delete the record, and other complexities.&lt;/p&gt;
&lt;h3 id=&quot;acknowledgements&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#acknowledgements&quot; aria-label=&quot;acknowledgements permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Acknowledgements&lt;/h3&gt;
&lt;p&gt;As we wrap this series on Spring Cloud Stream and Apache Kafka transactions, I would like to thank a few people that gave me valuable feedback and guidance throughout this series. I want to thank &lt;a href=&quot;https://spring.io/team/garyrussell&quot;&gt;Gary Russell&lt;/a&gt;, the project lead for Spring for Apache Kafka, in a very special way for guiding me through all the nitty-gritty technical details of how transactions work in Spring for Apache Kafka at a very low level. Gary answered a countless number of my questions on Spring and transactions and especially from a Spring for Apache Kafka/Spring Cloud Stream perspective and I am grateful to him. I also want to especially thank &lt;a href=&quot;https://spring.io/team/Buzzardo&quot;&gt;Jay Bryant&lt;/a&gt; for meticulously proofreading all the blog drafts and making all the necessary corrections. Special thanks also goes to &lt;a href=&quot;https://spring.io/team/ilayaperumalg&quot;&gt;Ilayaperumal Gopinathan&lt;/a&gt; and &lt;a href=&quot;https://spring.io/team/olegz&quot;&gt;Oleg Zhurakousky&lt;/a&gt; for all the guidance and support they gave.&lt;/p&gt;
&lt;p&gt;Once again, here are the links to all the other parts in this blog series.&lt;/p&gt;
&lt;p&gt;Part 1: &lt;a href=&quot;https://spring.io/blog/2023/09/27/introduction-to-transactions-in-spring-cloud-stream-kafka-applications&quot;&gt;Introduction to Transactions in Spring Cloud Stream Kafka Applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 2: &lt;a href=&quot;https://spring.io/blog/2023/09/28/producer-initiated-transactions-in-spring-cloud-stream-kafka-applications&quot;&gt;Producer Initiated Transactions in Spring Cloud Stream Kafka Applications
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 3: &lt;a href=&quot;https://spring.io/blog/2023/10/04/synchronizing-with-external-transaction-managers-in-spring-cloud-stream&quot;&gt;Synchronizing with External Transaction Managers in Spring Cloud Stream Kafka Applications
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 4: &lt;a href=&quot;https://spring.io/blog/2023/10/11/transactional-rollback-strategies-with-spring-cloud-stream-and-apache-kafka&quot;&gt;Transactional Rollback Strategies with Spring Cloud Stream and Apache Kafka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 5: &lt;a href=&quot;https://spring.io/blog/2023/10/16/apache-kafkas-exactly-once-semantics-in-spring-cloud-stream-kafka&quot;&gt;Apache Kafka¡¯s Exactly-Once Semantics in Spring Cloud Stream Kafka Applications&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - October 24th, 2023]]></title><link>https://spring.io/blog/2023/10/24/this-week-in-spring-october-24th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/10/24/this-week-in-spring-october-24th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 24 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! This week I&apos;m in Lisbon, and Porto, Portugal, ahead of the Porto Tech Hub event in Porto, and my tour bus is about to leave! So, let&apos;s dive right into it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/18/spring-authorization-server-1-1-3-1-0-4-and-0-4-4-available-now&quot;&gt;Spring Authorization Server 1.1.3, 1.0.4 and 0.4.4 available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/18/spring-authorization-server-1-2-0-rc1-available-now&quot;&gt;Spring Authorization Server 1.2.0-RC1 available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/19/spring-boot-2-7-17-available-now&quot;&gt;Spring Boot 2.7.17 available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/20/spring-boot-3-2-0-rc1-available-now&quot;&gt;Spring Boot 3.2.0-RC1 available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/10/23/spring-modulith-1-1-rc1-and-1-0-3-released&quot;&gt;Spring Modulith 1.1 RC1 and 1.0.2 released&lt;/a&gt; - this is quickly turning into one of my favorite new projects and is well worth your attention, too. It&apos;s a structured way to build well-designed, elegant, modular monoliths (or &lt;em&gt;moduliths&lt;/em&gt;), but it has the plumbing to also make expanding into a distributed system easy, too. I love this framwork! Spring Boot has opinions around the technical arrangement of your code, and this framework, building on top of Spring Boot, has opinions on the architectural arrangement of your application. But if you use it correctly, your application&apos;s code is better for it. Nice!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/blog/2023/10/20/kcs-shanghai/&quot;&gt;Blog: A Quick Recap of 2023 China Kubernetes Contributor Summit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/blog/2023/10/23/persistent-volume-last-phase-transition-time/&quot;&gt;Blog: PersistentVolume Last Phase Transition Time in Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/blog/2023/10/24/plants-process-and-parties-the-kubernetes-1.28-release-interview/&quot;&gt;Blog: Plants, process and parties: the Kubernetes 1.28 release interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.redhat.com/articles/2023/10/19/containerize-spring-boot-application-podman-desktop#running_the_containerized_application&quot;&gt;Containerize a Spring Boot application with Podman Desktop | Red Hat Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Vault 3.1.0-RC1 released]]></title><link>https://spring.io/blog/2023/10/23/spring-vault-3-1-0-rc1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/10/23/spring-vault-3-1-0-rc1-released</guid><dc:creator><![CDATA[Mark Paluch]]></dc:creator><pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that the Spring Vault &lt;code&gt;3.1.0-RC1&lt;/code&gt; release is available now.&lt;/p&gt;
&lt;p&gt;Spring Vault &lt;code&gt;3.1.0-RC1&lt;/code&gt; ships with &lt;a href=&quot;https://github.com/spring-projects/spring-vault/releases/tag/3.1.0-RC1&quot;&gt;numerous enhancements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.spring.io/spring-vault/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-vault&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-vault/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-vault/reference/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Modulith 1.1 RC1 and 1.0.2 released]]></title><link>https://spring.io/blog/2023/10/23/spring-modulith-1-1-rc1-and-1-0-2-released</link><guid isPermaLink="true">https://spring.io/blog/2023/10/23/spring-modulith-1-1-rc1-and-1-0-2-released</guid><dc:creator><![CDATA[Oliver Drotbohm]]></dc:creator><pubDate>Mon, 23 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It is my pleasure to announce the release of Spring Modulith 1.1 RC1 and 1.0.2. While the latter primarily ships bug fixes and upgrades to Spring Boot 3.1.5, the former packages quite a few new features, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade to Spring Boot 3.2 RC1 / Spring Framework 6.1 RC1 &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/issues/329&quot;&gt;GH-329&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Verification of references in code located in the application root &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/issues/317&quot;&gt;GH-317&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ApplicationModuleListener&lt;/code&gt; now located in &lt;code&gt;¡¦.modulith-events&lt;/code&gt; in &lt;code&gt;spring-modulith-events-api&lt;/code&gt; &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/issues/322&quot;&gt;GH-322&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stricter filtering of bean definitions in application module tests &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/issues/320&quot;&gt;GH-320&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Moments&lt;/code&gt; now implements &lt;code&gt;Now&lt;/code&gt; &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/issues/335&quot;&gt;GH-335&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information consult the full change logs for &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/releases/tag/1.1.0-RC1&quot;&gt;1.1 RC1&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/releases/tag/1.0.2&quot;&gt;1.0.2&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.2.0-RC1 available now]]></title><link>https://spring.io/blog/2023/10/20/spring-boot-3-2-0-rc1-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/20/spring-boot-3-2-0-rc1-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Fri, 20 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.2.0-RC1&lt;/code&gt; has been released and is now available from &lt;a href=&quot;https://repo.spring.io/milestone&quot;&gt;https://repo.spring.io/milestone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.2.0-RC1&quot;&gt;128 enhancements, documentation improvements, dependency upgrades, and bug fixes&lt;/a&gt;. Notable new features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for reloading of SSL trust material when using Netty and Tomcat&lt;/li&gt;
&lt;li&gt;Improved nested jar support&lt;/li&gt;
&lt;li&gt;Support for configuring RabbitMQ and Apache Kafka using SSL bundles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2.0-RC1-Release-Notes&quot;&gt;release notes&lt;/a&gt; for more details and upgrade instructions.&lt;/p&gt;
&lt;p&gt;Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.2.0-RC1/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: VMware vice president Betty Junod]]></title><link>https://spring.io/blog/2023/10/19/a-bootiful-podcast-vmware-vice-president-betty-junod</link><guid isPermaLink="true">https://spring.io/blog/2023/10/19/a-bootiful-podcast-vmware-vice-president-betty-junod</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 19 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! In this installment Josh Long talks to VMware vice president &lt;a href=&quot;https://twitter.com/BettyJunod&quot;&gt;Betty Junod&lt;/a&gt; about VMware, its amazing ecosystem, and so much more.&lt;/p&gt;
&lt;iframe title=&quot;VMware Vice President Betty Junod&quot; allowtransparency=&quot;true&quot; height=&quot;150&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);height:150px;&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?i=cyh8i-14d65f4-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;logo_link=episode_page&amp;btn-skin=7&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.1.5 available now]]></title><link>https://spring.io/blog/2023/10/19/spring-boot-3-1-5-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/19/spring-boot-3-1-5-available-now</guid><dc:creator><![CDATA[Moritz Halbritter]]></dc:creator><pubDate>Thu, 19 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.1.5&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.1.5&quot;&gt;62 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.1.5/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.0.12 available now]]></title><link>https://spring.io/blog/2023/10/19/spring-boot-3-0-12-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/19/spring-boot-3-0-12-available-now</guid><dc:creator><![CDATA[Moritz Halbritter]]></dc:creator><pubDate>Thu, 19 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.0.12&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.0.12&quot;&gt;48 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.0.12/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 2.7.17 available now]]></title><link>https://spring.io/blog/2023/10/19/spring-boot-2-7-17-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/10/19/spring-boot-2-7-17-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 19 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;2.7.17&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v2.7.17&quot;&gt;32 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.17/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Security 5.8.8, 6.0.8, 6.1.5 and 6.2.0-RC2 released]]></title><link>https://spring.io/blog/2023/10/18/spring-security-6-2-0-rc2-released</link><guid isPermaLink="true">https://spring.io/blog/2023/10/18/spring-security-6-2-0-rc2-released</guid><dc:creator><![CDATA[Steve Riesenberg]]></dc:creator><pubDate>Wed, 18 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that the Spring Security &lt;code&gt;5.8.8&lt;/code&gt;, &lt;code&gt;6.0.8&lt;/code&gt;, &lt;code&gt;6.1.5&lt;/code&gt; and &lt;code&gt;6.2.0-RC2&lt;/code&gt; versions are available now.&lt;/p&gt;
&lt;p&gt;Please refer to the &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases&quot;&gt;releases page&lt;/a&gt; for more detail on what is included in each release. In particular, you can review the release notes for each milestone that will make up the &lt;code&gt;6.2.0&lt;/code&gt; release (&lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-M1&quot;&gt;&lt;code&gt;6.2.0-M1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-M2&quot;&gt;&lt;code&gt;6.2.0-M2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-M3&quot;&gt;&lt;code&gt;6.2.0-M3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-RC1&quot;&gt;&lt;code&gt;6.2.0-RC1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.2.0-RC2&quot;&gt;&lt;code&gt;6.2.0-RC2&lt;/code&gt;&lt;/a&gt;) next month.&lt;/p&gt;
&lt;p&gt;We encourage you to take the latest release candidate for a spin and provide any feedback you have! Some notable changes available in the 6.2 release candidate include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add with() method to apply SecurityConfigurerAdapter &lt;a href=&quot;https://github.com/spring-projects/spring-security/pull/13432&quot;&gt;#13432&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automatically enable .cors() if CorsConfigurationSource bean is present &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/5011&quot;&gt;#5011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simplify configuration of OAuth2 Client component model &lt;a href=&quot;https://github.com/spring-projects/spring-security/pull/13587&quot;&gt;#13587&lt;/a&gt; (&lt;a href=&quot;https://spring.io/blog/2023/08/22/tackling-the-oauth2-client-component-model-in-spring-security/&quot;&gt;blog post&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-security/reference/6.2-SNAPSHOT/servlet/oauth2/index.html&quot;&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add OIDC Back-channel Logout Support &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/7845&quot;&gt;#7845&lt;/a&gt; (&lt;a href=&quot;https://docs.spring.io/spring-security/reference/6.2-SNAPSHOT/reactive/oauth2/login/logout.html#configure-provider-initiated-oidc-logout&quot;&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Test coverage for virtual threads &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/12790&quot;&gt;#12790&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues/12791&quot;&gt;#12791&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add servlet pattern support to AuthorizeHttpRequests &lt;a href=&quot;https://github.com/spring-projects/spring-security/pull/13857&quot;&gt;#13857&lt;/a&gt; (&lt;a href=&quot;https://docs.spring.io/spring-security/reference/6.2-SNAPSHOT/servlet/authorization/authorize-http-requests.html#match-by-mvc&quot;&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To update your project to use the release candidate for Gradle builds, add the following to &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;ext[&apos;spring-security.version&apos;] = &apos;6.2.0-RC2&apos;

repositories {
    ...
    maven { url &apos;https://repo.spring.io/milestone&apos; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or for Maven builds, add the following to &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;properties&gt;
  &amp;#x3C;spring-security.version&gt;6.2.0-RC2&amp;#x3C;/spring-security.version&gt;
&amp;#x3C;/properties&gt;
&amp;#x3C;repositories&gt;
  ...
  &amp;#x3C;repository&gt;
    &amp;#x3C;id&gt;spring-milestones&amp;#x3C;/id&gt;
    &amp;#x3C;name&gt;Spring Milestones&amp;#x3C;/name&gt;
    &amp;#x3C;url&gt;https://repo.spring.io/milestone&amp;#x3C;/url&gt;
    &amp;#x3C;snapshots&gt;
      &amp;#x3C;enabled&gt;false&amp;#x3C;/enabled&gt;
    &amp;#x3C;/snapshots&gt;
  &amp;#x3C;/repository&gt;
&amp;#x3C;/repositories&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Spring Security &lt;code&gt;6.2.0-RC2&lt;/code&gt; requires Spring Framework &lt;code&gt;6.1.0-RC1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;support&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#support&quot; aria-label=&quot;support permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;#support&quot;&gt;&lt;/a&gt;Support&lt;/h2&gt;
&lt;p&gt;As always, we look forward to hearing your &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues&quot;&gt;feedback on GitHub&lt;/a&gt; and your &lt;a href=&quot;https://stackoverflow.com&quot;&gt;questions on StackOverflow&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.spring.io/spring-security/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-security&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-security/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-security/reference/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>